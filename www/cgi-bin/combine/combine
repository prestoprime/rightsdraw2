#!/bin/tcsh -f
#  rightsdraw
#  Version: 2.0.1
#  Authors: L. Boch
#
#  Copyright (C) 2010-2012 RAI â€“ Radiotelevisione Italiana <cr_segreteria@rai.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set echo_style = both
echo "content-type: text/html\n"
set mcomode = `cat $pdir/users/$puser/config/mcomode`
set repo = $pdir/users/$puser/repo
set colors = `cat $pdir/users/$puser/config/colors`
set rankdir = `cat $pdir/users/$puser/config/rankdir`
set this = `basename $0`
if ( $REQUEST_METHOD != "GET" ) then
	echo "400"
	echo "Bad request "
	echo "$this accept only GET"
	exit 99
endif
	

set inquery = `echo $QUERY_STRING | cut -d'&' -f1- --output-delimiter=' ' | cut -d'=' -f1- --output-delimiter=' '`
set inquery = `$pdir/bin/clean.querystring $inquery`
set instance = "null"
set contract = "null"
set i = 1
while ( $i < $#inquery )
        if ( "$inquery[$i]" == "instance" ) then
                @ i++
                set instance = "$inquery[$i]"
        else if ( "$inquery[$i]" == "contract" ) then
                @ i++
                set contract = "$inquery[$i]"
        else
		echo "400"
		echo "Bad request "
		echo "$this unknown $inquery[$i]"
                exit 1
        endif
        @ i++
end
set ret = 0
#Sanity check
if ( !( -e "$repo/pprights/$instance" ) ) then
	echo "404"
	echo "Not Found "
	echo "$this $repo/pprights/$instance"
	exit 2
endif
if ( !( -e "$repo/contracts/$contract" ) ) then
	echo "404"
	echo "Not Found "
	echo "$this $repo/contracts/$contract"
	exit 2
endif
# making a bak copy
cp $repo/pprights/$instance $repo/pprights/.tmp/$instance.$$.bak
echo "ALERT this is still to be implemented"
echo "200"
echo "Success"
#exit 0
################################################################
# TO BE IMPLEMENTED - BEGIN                                    #
################################################################

### Verification activities
####### pprights
############### must have IPEntity, only a main one
#set instanceipentities = `xsltproc --stringparam classname IPEntity $pdir/xsl/getIndividualsOfClass.xsl $repo/pprights/$instance | sort -u`
set avidentifier =  `xsltproc $pdir/xsl/getAVIdentifier.xsl $repo/pprights/$instance | sort -u`
if ( $#avidentifier != 1 ) then
	echo "500"
	echo "Server Error"
	echo "$this didn't find exactly one main IP entity in instance $instance"
	echo "$this found $avidentifier"
	exit 3
endif
############### must have a Principal, only if it ends to be a SALE
set principals = `xsltproc --stringparam objname actedBy $pdir/xsl/getRangeIndividualsFromObjectProperty.xsl $repo/pprights/$instance`
####### contract
############### must be one contract
#set contractiri = `xsltproc --stringparam classname Contract $pdir/xsl/getIndividualsOfClass.xsl $repo/contracts/$contract | sort -u`
set contractiri = `xsltproc --stringparam objname issuedIn $pdir/xsl/getRangeIndividualsFromObjectProperty.xsl $repo/contracts/$contract | sort -u`
if ( $#contractiri != 1 ) then
	echo "500"
	echo "Server Error"
	echo "$this didn't find contract individual issuing deontic expressions in contract $contract"
	exit 3
endif
############### must have Parties
set issuers = `xsltproc --stringparam objname issuedBy $pdir/xsl/getRangeIndividualsFromObjectProperty.xsl $repo/contracts/$contract | sort -u`
if ( "$issuers" == "" ) then
	echo "500"
	echo "Server Error"
	echo "$this didn't find issuers of deontic expression in contract $contract"
	exit 3
endif
set contractprincipals = `xsltproc --stringparam objname actedBy $pdir/xsl/getRangeIndividualsFromObjectProperty.xsl $repo/contracts/$contract | sort -u`
if ( "$contractprincipals" == "" ) then
	echo "500"
	echo "Server Error"
	echo "$this didn't find principals of deontic expression in contract $contract"
	exit 3
endif
############### must have one Object matching IPEntity above
set contractavidentifier =  `xsltproc $pdir/xsl/getAVIdentifier.xsl $repo/contracts/$contract | sort -u | grep "$avidentifier"`
if ( "$contractavidentifier" == "" ) then
	echo "500"
	echo "Server Error"
	echo "$this didn't find properly identified objects in contract $contract matching $avidentifier of instance $instance"
	exit 3
endif
if ( $contractavidentifier != $avidentifier ) then
	echo "500"
	echo "Server Error"
	echo "$this $conractavidentifier in contract $conctract doesn't match with $avidentifier of instance $instance"
	exit 3
endif
############### If PURCHASE must have permitted actions acted by the Principal above
############################################################ WEAKNESS would need a principal in current pprights
echo "<p>$this going to try purchase case from contract $contract to instance $instance"
set purchases = ""
if ( "$principals" != "" ) then
	foreach contractprincipal ( $contractprincipals )
		foreach principal ( $principals )
			if ( $principal == $contractprincipal ) then
				echo CIAO $purchases OH $principal MAH
				set purchases = "$purchases $principal"
			endif
		end
	end
else
	set purchases = $contractprincipals
endif
if ( "$purchases" == "" ) then
	echo "No purchases found"
else 
### PURCHASE CASE ###############################
	set numloops = 1
	foreach principaliri ( $purchases ) 
		foreach issueriri ( $issuers ) 
			if ( $issueriri != $principaliri ) then
				xsltproc --stringparam contractiri $contractiri \
					--stringparam avidentifier $avidentifier \
					--stringparam issueriri $issueriri \
					--stringparam principaliri $principaliri \
					$pdir/xsl/applyPurchaseFromContract.xsl $repo/contracts/$contract > $repo/pprights/.tmp/$contract.purchase.$$
				set ret = $?
				if ( $ret ) then
					echo "500"
					echo "Server Error"
					echo "$this failed on purchase case with $contract  ($contractiri, $avidentifier, $issueriri, $principaliri ) "
					exit 4
				endif
				echo "<p>run $numloops, $contractiri, $avidentifier, $issueriri, $principaliri"
				@ numloops ++
				xsltproc --stringparam extinstance $repo/pprights/.tmp/$contract.purchase.$$ \
					$pdir/xsl/mergeWithInstance.xsl $repo/pprights/$instance > $repo/pprights/.tmp/$instance
				set ret = $?
				if ( $ret ) then
					echo "500"
					echo "Server Error"
					echo "$this failed on purchase case with $contract  ($contractiri, $avidentifier, $issueriri, $principaliri ) to instance $instance"
					cp $repo/pprights/.tmp/$instance.$$.bak $repo/pprights/$instance
					exit 4
				endif
				md5sum $repo/pprights/$instance
				mv $repo/pprights/.tmp/$instance $repo/pprights/$instance
				md5sum $repo/pprights/$instance
				cat $repo/pprights/.tmp/$contract.purchase.$$
				echo EOL
			endif
		end
	end
endif
exit 0


############### If SALE must have permissions issued by the Principal above
set sales = ""
if ( "$principals" != "" ) then
	foreach issuer ( $issuers )
		foreach principal ( $principals )
			if ( $principal == $issuer ) then
				set sales = "$sales" $principal
			endif
		end
	end
endif
if ( "$sales" == "" ) then
	echo "No sales found"
endif
### SALE CASE
################################################################
# TO BE IMPLEMENTED - END                                      #
################################################################
exit 0


# First adding deontic
xsltproc --stringparam twoclass $class --stringparam twoname $ind $pdir/xsl/addIndividual.xsl $repo/$instance > $repo/.tmp/$instance
set ret = $?
if ( $ret ) then
	echo "500"
	echo "Server Error"
	echo "$this failed on addIndividual ($class, $ind) to $instance"
	cp $repo/.tmp/$instance.$$.bak $repo/$instance
	exit 5
endif
mv $repo/.tmp/$instance $repo/$instance
# Then adding obj
set obj = "urn:mpeg:mpeg21:mco:core:2012#issuedIn"
set class = "urn:mpeg:mpeg21:mco:core:2012#Contract"
xsltproc --stringparam obj $obj --stringparam one $ind --stringparam twoclass $class --stringparam twoname $handle  $pdir/xsl/addObjProperty.xsl $repo/$instance > $repo/.tmp/$instance
set ret = $?
if ( $ret ) then
	echo "500"
	echo "Server Error"
	echo "$this failed on addObjProperty ($obj, $ind, $class, $handle) to $instance"
	cp $repo/.tmp/$instance.$$.bak $repo/$instance
	exit 5
endif
mv $repo/.tmp/$instance $repo/$instance
echo "200"
echo "Success"
exit 0





