#!/bin/tcsh -f
#  rightsdraw
#  Version: 2.0.1
#  Authors: L. Boch
#
#  Copyright (C) 2010-2012 RAI â€“ Radiotelevisione Italiana <cr_segreteria@rai.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set echo_style = both
echo "content-type: text/html\n"
set repo = $pdir/logs
set mykpr = `cat $pdir/users/$puser/config/mykpr`
set p4serverurl = `cat $pdir/users/$puser/config/p4serverurl`
set p4account = `cat $pdir/users/$puser/config/p4account`
set curloptions = `cat $pdir/users/$puser/config/curloptions`
set owliriprefix =  `cat $pdir/users/$puser/config/owliriprefix`
set this = `basename $0`
if ( $REQUEST_METHOD != "GET" ) then
	echo "400"
	echo "Bad request "
	echo "$this accept only GET"
	exit 99
endif
	

set inquery = `echo $QUERY_STRING | cut -d'&' -f1- --output-delimiter=' ' | cut -d'=' -f1- --output-delimiter=' '`
set inquery = `$pdir/bin/clean.querystring $inquery`
set kp = "null"

set permittedaction = "null"
set isexclusive = "null"
set accesspolicy = "null"
set serviceaccesspolicy = "null"
set deliverymodality = "null"
set means = "null"
set device = "null"
set usertimeaccess = "null"
set relatedaction = "null"
set negativeaccesspolicy = "no"
set negativeserviceaccesspolicy = "no" 
set negativedeliverymodality = "no"
set negativemeans = "no"
set negativedevice = "no"
set negativeusertimeaccess = "no"
set negativerelatedaction = "no"
set afterdate = "null"
set beforedate = "null"
set negativetemporalcontext = "no"
set territories = "null"
set negativespatialcontext = "no"
set languanges = "null"
set negativelanguages = "no"
set numruns = "null"
set runduration = "null"
set i = 1
while ( $i < $#inquery )
        if ( "$inquery[$i]" == "kp" ) then
                @ i++
                set kp = "$inquery[$i]"
        else if ( "$inquery[$i]" == "permittedaction" ) then
                @ i++
                set permittedaction = "$inquery[$i]"
        else if ( "$inquery[$i]" == "isexclusive" ) then
                @ i++
                set isexclusive = "$inquery[$i]"
        else if ( "$inquery[$i]" == "accesspolicy" ) then
                @ i++
                set accesspolicy = "$inquery[$i]"
        else if ( "$inquery[$i]" == "serviceaccesspolicy" ) then
                @ i++
                set serviceaccesspolicy = "$inquery[$i]"
        else if ( "$inquery[$i]" == "deliverymodality" ) then
                @ i++
                set deliverymodality = "$inquery[$i]"
        else if ( "$inquery[$i]" == "means" ) then
                @ i++
                set means = "$inquery[$i]"
        else if ( "$inquery[$i]" == "device" ) then
                @ i++
                set device = "$inquery[$i]"
        else if ( "$inquery[$i]" == "usertimeaccess" ) then
                @ i++
                set usertimeaccess = "$inquery[$i]"
        else if ( "$inquery[$i]" == "relatedaction" ) then
                @ i++
                set relatedaction = "$inquery[$i]"
        else if ( "$inquery[$i]" == "afterdate" ) then
                @ i++
                set afterdate = "$inquery[$i]"
        else if ( "$inquery[$i]" == "beforedate" ) then
                @ i++
                set beforedate = "$inquery[$i]"
        else if ( "$inquery[$i]" == "territories" ) then
                @ i++
                set territories = "$inquery[$i]"
        else if ( "$inquery[$i]" == "languages" ) then
                @ i++
                set languages = "$inquery[$i]"
        else if ( "$inquery[$i]" == "numruns" ) then
                @ i++
                set numruns = "$inquery[$i]"
        else if ( "$inquery[$i]" == "runduration" ) then
                @ i++
                set runduration = "$inquery[$i]"
        else if ( "$inquery[$i]" == "negativeaccesspolicy" ) then
                @ i++
                set negativeaccesspolicy = "$inquery[$i]"
        else if ( "$inquery[$i]" == "negativeserviceaccesspolicy" ) then
                @ i++
                set negativeserviceaccesspolicy = "$inquery[$i]"
        else if ( "$inquery[$i]" == "negativedeliverymodality" ) then
                @ i++
                set negativedeliverymodality = "$inquery[$i]"
        else if ( "$inquery[$i]" == "negativemeans" ) then
                @ i++
                set negativemeans = "$inquery[$i]"
        else if ( "$inquery[$i]" == "negativedevice" ) then
                @ i++
                set negativedevice = "$inquery[$i]"
        else if ( "$inquery[$i]" == "negativeusertimeaccess" ) then
                @ i++
                set negativeusertimeaccess = "$inquery[$i]"
        else if ( "$inquery[$i]" == "negativerelatedaction" ) then
                @ i++
                set negativerelatedaction = "$inquery[$i]"
        else if ( "$inquery[$i]" == "negativetemporalcontext" ) then
                @ i++
                set negativetemporalcontext = "$inquery[$i]"
        else if ( "$inquery[$i]" == "negativespatialcontext" ) then
                @ i++
                set negativespatialcontext = "$inquery[$i]"
        else if ( "$inquery[$i]" == "negativelanguages" ) then
                @ i++
                set negativelanguages = "$inquery[$i]"
        else
		echo "400"
		echo "Bad request "
		echo "$this unknown $inquery[$i]"
                exit 1
        endif
        @ i++
end
#
#create empty query
set instance = $this.$$
xsltproc --stringparam setIRI `cat $pdir/users/$puser/config/owliriprefix`$instance $pdir/xsl/getSetOntologyIRI.xsl $pdir/newinstance.owl > $repo/$instance
set ret = $?
if ( $ret ) then
	echo "500"
	echo "Server Error"
	echo "$this got $ret in creating instance $instance"
	rm $repo/$instance
	exit 2
endif
#going on
if ( "$kp" != "null" ) then
	# sanity check kp
	if ( !( -ersf "$pdir/www/html/kpr/$mykpr/$kp" ) ) then
		echo "404"
		echo "Not Found"
		echo "$this $kp not found in kpr $mykpr"
		exit 3
	endif
	# trovare tutte perm in kp
	set kppermissions = `xsltproc --stringparam classname Permission $pdir/xsl/getIndividualsOfClass.xsl "$pdir/www/html/kpr/$mykpr/$kp" | sort -u`
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this could not get permissions for kp $kp"
		exit 4
	endif
	# trovare tutte le permittedAction in kp
	set kppermittedactions = `xsltproc $pdir/xsl/getPermittedActions.xsl "$pdir/www/html/kpr/$mykpr/$kp" | sort -u`
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this could not get permitted actions for kp $kp"
		exit 5
	endif
	# fare Merge
	xsltproc --stringparam extinstance "$pdir/www/html/kpr/$mykpr/$kp" $pdir/xsl/mergeWithInstance.xsl $repo/$instance > $repo/.tmp.$instance
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this could not merge $kp into instance $instance"
		exit 6
	endif
	mv $repo/.tmp.$instance $repo/$instance
else if ( "$permittedaction" != "null" ) then
	#create permission
	set twoname = "#pquery"
	set twoclass = "http://purl.oclc.org/NET/mvco.owl#Permission"
	xsltproc --stringparam twoclass $twoclass --stringparam twoname $twoname $pdir/xsl/addIndividual.xsl $repo/$instance > $repo/.tmp.$instance
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this could not add $twoname to instance $instance"
		exit 7
	endif
	mv $repo/.tmp.$instance $repo/$instance
	#add permitted action
	set one = "#pquery"
	set obj = "http://purl.oclc.org/NET/mvco.owl#permitsAction"
	set twoclass = "$permittedaction"
	set twoname = "#aquery"
	xsltproc --stringparam obj $obj --stringparam one $one --stringparam twoclass $twoclass --stringparam twoname $twoname  $pdir/xsl/addObjProperty.xsl $repo/$instance > $repo/.tmp.$instance
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this failed on addObjProperty ($obj, $one, $twoclass, $twoname) to $instance"
		exit 8
	endif
	mv $repo/.tmp.$instance $repo/$instance

	# adding exclusivity if given
	if ( $isexclusive == "on" ) then
		set owner = $one
		set key = "urn:mpeg:mpeg21:mco:ipre:2012#isExclusive"
		set value = true
		xsltproc --stringparam owner $owner --stringparam key $key --stringparam value $value $pdir/xsl/addDataProperty.xsl $repo/$instance > $repo/.tmp.$instance
		set ret = $?
		if ( $ret ) then
			echo "500"
			echo "Server Error"
			echo "$this failed on addDataProperty ($owner, $key, $value) to $instance"
			exit 6
		endif
		mv $repo/.tmp.$instance $repo/$instance
	endif

	# looping the creation of the required facts (on condition side)
	set one = "#pquery"
	set obj = "http://purl.oclc.org/NET/mvco.owl#hasRequired"
	foreach stuff ( $negativeaccesspolicy,$accesspolicy $negativeserviceaccesspolicy,$serviceaccesspolicy $negativedeliverymodality,$deliverymodality $negativemeans,$means $negativedevice,$device $negativeusertimeaccess,$usertimeaccess $negativerelatedaction,$relatedaction ) 
		set negative = `echo $stuff | cut -d',' -f1`
		set class = `echo $stuff | cut -d',' -f2-`
		if ( "$class" != "null" ) then
			set xnum = `cat $pdir/users/$puser/config/inumber|bc`
			@ xnum ++
			echo $xnum > $pdir/users/$puser/config/inumber
			set ind = "#x$xnum"
			xsltproc --stringparam obj $obj --stringparam one $one --stringparam negative $negative --stringparam twoclass $class --stringparam twoname $ind $pdir/xsl/addObjProperty.xsl $repo/$instance > $repo/.tmp.$instance
			set ret = $?
			if ( $ret ) then
				echo "500"
				echo "Server Error"
				echo "$this failed on addObjProperty ($one,$negative,$class, $ind) to $instance"
				exit 7
			endif
			mv $repo/.tmp.$instance $repo/$instance
		endif
	end
	set kppermittedactions = "#aquery"
	set kppermissions =  "#pquery"
else
	echo "400"
	echo "Bad request "
	echo "$this both kp and permittedaction are  null" 
	exit 2
endif

###############
#	create Fact Intersection 
if ( $afterdate != null || $beforedate != null || $numruns != null || $runduration != null || $languages != null || $territories != null ) then
	set xnum = `cat $pdir/users/$puser/config/inumber|bc`
	@ xnum ++
	echo $xnum > $pdir/users/$puser/config/inumber
	set twoname = "#x$xnum"
	set twoclass = "urn:mpeg:mpeg21:mco:core:2012#FactIntersection"
	set obj = "http://purl.oclc.org/NET/mvco.owl#hasRequired"
	foreach one ( $kppermissions )
		xsltproc --stringparam obj $obj --stringparam one $one --stringparam twoclass $twoclass --stringparam twoname $twoname  $pdir/xsl/addObjProperty.xsl $repo/$instance > $repo/.tmp.$instance
		set ret = $?
		if ( $ret ) then
			echo "500"
			echo "Server Error"
			echo "$this failed on addObjProperty ($obj, $one, $twoclass, $twoname) to $instance"
			exit 8
		endif
		mv $repo/.tmp.$instance $repo/$instance
	end
	set one = $twoname
	set obj = "urn:mpeg:mpeg21:mco:core:2012#hasFact"
endif
#	create Temporal Context
if ( $afterdate != null || $beforedate != null ) then
	set xnum = `cat $pdir/users/$puser/config/inumber|bc`
	@ xnum ++
	echo $xnum > $pdir/users/$puser/config/inumber
	set twoname = "#x$xnum"
	set twoclass = "urn:mpeg:mpeg21:mco:ipre:2012#TemporalContext"
	xsltproc --stringparam obj $obj --stringparam one $one --stringparam twoclass $twoclass --stringparam twoname $twoname --stringparam negative $negativetemporalcontext $pdir/xsl/addObjProperty.xsl $repo/$instance > $repo/.tmp.$instance
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this failed on addObjProperty ($obj, $one, $twoclass, $twoname) to $instance"
		exit 8
	endif
	mv $repo/.tmp.$instance $repo/$instance
#	add Data Properties
	if ( $afterdate != null ) then
		set owner = $twoname
		set key = "urn:mpeg:mpeg21:mco:ipre:2012#afterDate"
		set value = $afterdate
		xsltproc --stringparam owner $owner --stringparam key $key --stringparam value $value $pdir/xsl/addDataProperty.xsl $repo/$instance > $repo/.tmp.$instance
		set ret = $?
		if ( $ret ) then
			echo "500"
			echo "Server Error"
			echo "$this failed on addDataProperty ($owner, $key, $value) to $instance"
			exit 8
		endif
		mv $repo/.tmp.$instance $repo/$instance
	endif
	if ( $beforedate != null ) then
		set owner = $twoname
		set key = "urn:mpeg:mpeg21:mco:ipre:2012#beforeDate"
		set value = $beforedate
		xsltproc --stringparam owner $owner --stringparam key $key --stringparam value $value $pdir/xsl/addDataProperty.xsl $repo/$instance > $repo/.tmp.$instance
		set ret = $?
		if ( $ret ) then
			echo "500"
			echo "Server Error"
			echo "$this failed on addDataProperty ($owner, $key, $value) to $instance"
			exit 8
		endif
		mv $repo/.tmp.$instance $repo/$instance
	endif
endif
#	create Run
if ( $numruns != null || $runduration != null ) then
	set xnum = `cat $pdir/users/$puser/config/inumber|bc`
	@ xnum ++
	echo $xnum > $pdir/users/$puser/config/inumber
	set twoname = "#x$xnum"
	set twoclass = "urn:mpeg:mpeg21:mco:ipre:2012#Run"
	xsltproc --stringparam obj $obj --stringparam one $one --stringparam twoclass $twoclass --stringparam twoname $twoname --stringparam negative $negative $pdir/xsl/addObjProperty.xsl $repo/$instance > $repo/.tmp.$instance
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this failed on addObjProperty ($obj, $one, $twoclass, $twoname) to $instance"
		exit 8
	endif
	mv $repo/.tmp.$instance $repo/$instance
#	add Data Properties
	if ( $numruns != null ) then
		set owner = $twoname
		set key = "urn:mpeg:mpeg21:mco:ipre:2012#hasNumberOfRuns"
		set value = $numruns
		xsltproc --stringparam owner $owner --stringparam key $key --stringparam value $value $pdir/xsl/addDataProperty.xsl $repo/$instance > $repo/.tmp.$instance
		set ret = $?
		if ( $ret ) then
			echo "500"
			echo "Server Error"
			echo "$this failed on addDataProperty ($owner, $key, $value) to $instance"
			exit 8
		endif
		mv $repo/.tmp.$instance $repo/$instance
	endif
	if ( $runduration != null ) then
		set owner = $twoname
		set key = "urn:mpeg:mpeg21:mco:ipre:2012#hasValidity"
		set value = $runduration
		xsltproc --stringparam owner $owner --stringparam key $key --stringparam value $value $pdir/xsl/addDataProperty.xsl $repo/$instance > $repo/.tmp.$instance
		set ret = $?
		if ( $ret ) then
			echo "500"
			echo "Server Error"
			echo "$this failed on addDataProperty ($owner, $key, $value) to $instance"
			exit 8
		endif
		mv $repo/.tmp.$instance $repo/$instance
	endif
endif
if ( $languages != null ) then
#	create Language
	set xnum = `cat $pdir/users/$puser/config/inumber|bc`
	@ xnum ++
	echo $xnum > $pdir/users/$puser/config/inumber
	set twoname = "#x$xnum"
	set twoclass = "urn:mpeg:mpeg21:mco:ipre:2012#Language"
	xsltproc --stringparam obj $obj --stringparam one $one --stringparam twoclass $twoclass --stringparam twoname $twoname  --stringparam negative $negativelanguages $pdir/xsl/addObjProperty.xsl $repo/$instance > $repo/.tmp.$instance
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this failed on addObjProperty ($obj, $one, $twoclass, $twoname) to $instance"
		exit 8
	endif
	mv $repo/.tmp.$instance $repo/$instance
#	add Data Properties
	set owner = $twoname
	set key = "urn:mpeg:mpeg21:mco:ipre:2012#hasLanguage"
	set value = $languages
	xsltproc --stringparam owner $owner --stringparam key $key --stringparam value $value $pdir/xsl/addDataProperty.xsl $repo/$instance > $repo/.tmp.$instance
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this failed on addDataProperty ($owner, $key, $value) to $instance"
		exit 8
	endif
	mv $repo/.tmp.$instance $repo/$instance
endif
if ( $territories != null ) then
#	create SpatialContext
	set xnum = `cat $pdir/users/$puser/config/inumber|bc`
	@ xnum ++
	echo $xnum > $pdir/users/$puser/config/inumber
	set twoname = "#x$xnum"
	set twoclass = "urn:mpeg:mpeg21:mco:ipre:2012#SpatialContext"
	xsltproc --stringparam obj $obj --stringparam one $one --stringparam twoclass $twoclass --stringparam twoname $twoname --stringparam negative $negativespatialcontext $pdir/xsl/addObjProperty.xsl $repo/$instance > $repo/.tmp.$instance
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this failed on addObjProperty ($obj, $one, $twoclass, $twoname) to $instance"
		exit 8
	endif
	mv $repo/.tmp.$instance $repo/$instance
#	add Data Properties
	set owner = $twoname
	set key = "urn:mpeg:mpeg21:mco:ipre:2012#inCountry"
	set value = $territories
	xsltproc --stringparam owner $owner --stringparam key $key --stringparam value $value $pdir/xsl/addDataProperty.xsl $repo/$instance > $repo/.tmp.$instance
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this failed on addDataProperty ($owner, $key, $value) to $instance"
		exit 8
	endif
	mv $repo/.tmp.$instance $repo/$instance
endif
#Query diagram
$pdir/bin/mco.dosvg $repo/$instance query
set ret = $?
if ( $ret ) then
	echo "500"
	echo "Server Error"
	echo "$this got $ret in creating query diagram"
	exit 8
endif
#Posting the query and Getting jobid
curl -F rightsFile=@$repo/$instance $p4serverurl/wf/execute/query_rights -o $pdir/logs/$this.$$.job -H "userID:${p4account}" $curloptions
set ret = $?
if ( $ret ) then
	echo "500"
	echo "Server Error"
	echo "$this failed posting the query to $p4serverurl, got $ret."
	exit 9
endif
#Getting status
set try = 1
set maxtries = 4
while ( $try < $maxtries )
	curl $p4serverurl/wf/`cat $pdir/logs/$this.$$.job`/status -o $pdir/logs/$this.$$.status.$try -H "userID:${p4account}" $curloptions
	set ret = $?
	if ( $ret ) then
		echo "500"
		echo "Server Error"
		echo "$this failed in getting the query status from $p4serverurl, got $ret."
		exit 9
	endif
	set iscompleted = `grep -c 'status="completed"' $pdir/logs/$this.$$.status.$try`
	if ( $iscompleted ) then
		set try = $maxtries
	else
		@ try++
		sleep 4
	endif
end
#Trying to get results
curl $p4serverurl/wf/`cat $pdir/logs/$this.$$.job`/result -o $pdir/logs/$this.$$.results -H "userID:${p4account}" $curloptions
set ret = $?
if ( $ret ) then
	echo "500"
	echo "Server Error"
	echo "$this failed in getting the query results from $p4serverurl, got $ret."
	exit 9
endif
#Providing answer to client application
xsltproc --stringparam owlquerypic /rightsdraw2/query/$instance.png \
         $pdir/xsl/showQueryResults.xsl $pdir/logs/$this.$$.results > $pdir/logs/$this.$$.answer
        # --stringparam dipservice "$p4serverurl" $pdir/xsl/showQueryResults.xsl $pdir/logs/$this.$$.results > $pdir/logs/$this.$$.answer
set ret = $?
if ( $ret ) then
	echo "500"
	echo "Server Error"
	echo "$this got $ret in processing query results."
	exit 10
endif
cat $pdir/logs/$this.$$.answer
exit 0
